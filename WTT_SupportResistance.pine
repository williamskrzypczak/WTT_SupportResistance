//=====================================================================================================================
//
// WTT_Support/Resistance R1.3 © William Skrzypczak 2025
// Modified to include alert conditions for medium and high liquidity zones
// Additional modification to toggle low liquidity zones on/off
// NEW: Alerts now trigger when price enters existing liquidity zones
// NEW: Added daily highest high and lowest low indicators
// NEW: Simplified time filtering with single on/off toggle for trading hours
// NEW: Cleaned up unused session code and fixed syntax errors
//
// ====================================================================================================================

// The WTT Support/Resistance indicator identifies and visualizes key liquidity zones on price charts where significant 
// buying (support) or selling (resistance) activity has occurred.

// It analyzes recent price highs and lows combined with normalized trading volume to draw colored boxes at these 
// important price levels. The indicator's intensity reflects volume strength, with darker colors indicating stronger zones.

// The modified version includes configurable alert conditions that notify traders when price enters medium or high 
// liquidity zones, making it easier to act on potential reversal or continuation signals. These alerts can be customized 
// based on volume thresholds and can trigger separately for resistance zones (at price highs) or support zones (at price lows).
// A simple trading hours filter allows alerts to be limited to active market hours (7:45 AM - 10 AM CST & 7 PM - 11 PM CST) or run 24/7.

// The indicator helps traders identify key price levels where the market is likely to react, potentially improving entry 
// and exit points for trades.

// NEW: Now includes daily highest high and lowest low indicators to provide additional reference points for intraday trading.
// NEW: Simplified time filtering system with single on/off toggle for trading hours.
// NEW: Cleaned up unused session code and fixed syntax errors for improved performance and maintainability.

//@version=5
indicator('WTT_Support/Resistance R1.3', overlay = true, max_boxes_count = 500, max_labels_count = 500)

//
// ---- USER INPUTS ----
//

// Market Session Settings
filter_by_trading_hours = input.bool(true, "Overlap Mkt Time Filter (CST 7:45-11:00AM & 7-11PM)", group = "Trading Hours", tooltip="When enabled, alerts only trigger during specified trading hours")

box_amount = input.int(125, 'Amount', step = 10, tooltip = "Set the displayed amount of liquidity zones")
color_high_sup = input.color(color.gray, '↑', inline = 'sup', group = 'Color')  // Changed to a grayer purple/blue
color_low_sup = color.new(color_high_sup, 95)  // More transparent for stronger gradient
color_high_res = input.color(color.rgb(0, 128, 128), '↓', inline = 'sup', group = 'Color')  // Kept teal
color_low_res = color.new(color_high_res, 95)  // More transparent for stronger gradient

// Alert settings
alert_on_med = input.bool(true, "Alert on Medium Liquidity", group = "Alert Settings")
alert_on_high = input.bool(true, "Alert on High Liquidity", group = "Alert Settings")
alert_threshold_med = input.float(3, "Medium Liquidity Threshold", minval=1, maxval=10, step=0.1, group = "Alert Settings", tooltip="Volume strength value to consider as medium liquidity (default: 3)")
alert_threshold_high = input.float(7, "High Liquidity Threshold", minval=1, maxval=10, step=0.1, group = "Alert Settings", tooltip="Volume strength value to consider as high liquidity (default: 7)")

// Toggle settings for Low liquidity zones
show_low_liquidity = input.bool(false, "Show Low Liquidity Zones", group = "Display Settings", tooltip="Toggle visibility of low liquidity zones")

// Daily High/Low settings
show_daily_levels = input.bool(true, "Show Daily High/Low", group = "Daily Levels", tooltip="Display the highest high and lowest low of the current trading day")
daily_high_color = input.color(color.new(color.green, 15), "Daily High Color", group = "Daily Levels")
daily_low_color = input.color(color.new(color.red, 15), "Daily Low Color", group = "Daily Levels")
daily_level_width = input.int(2, "Line Width", minval=1, maxval=4, group = "Daily Levels")
daily_level_style = input.string("Dashed", "Line Style", options=["Solid", "Dashed", "Dotted"], group = "Daily Levels")

//
// ---- FUNCTION DEFINITIONS ----
//

// Time filter function (same as WTT_HiFreqScalp)
is_within_alert_time() =>
    if not filter_by_trading_hours
        true
    else
        // Get current exchange time
        current_hour = hour(time)
        current_minute = minute(time)
        current_time = current_hour * 60 + current_minute
        
        // Adjust time windows based on actual exchange time
        // Morning session: 7:45AM-11:00AM (adjust as needed)
        window1_start = 13 * 60 + 45  // 13:45
        window1_end = 17 * 60         // 17:00
        
        // Evening session: 7:00PM-11:00PM (adjust to match exchange time)
        // If exchange shows 22:30 when it's 9:36 PM local, adjust accordingly
        window2_start = 19 * 60       // 19:00 (7:00 PM)
        window2_end = 23 * 60         // 23:00 (11:00 PM)
        
        // Check if current time falls within either window
        in_window1 = current_time >= window1_start and current_time < window1_end
        in_window2 = current_time >= window2_start and current_time < window2_end
        
        in_window1 or in_window2

// Check if alerts should be active based on trading hours filter
is_active_session() =>
    result = if not filter_by_trading_hours
        true
    else
        is_within_alert_time()
    result

// Normalize volume
normalize_volume() =>
    vol = math.avg(volume, 10) / 10
    reference_vol = ta.percentile_nearest_rank(vol, 1000, 99)
    norm_vol = vol / reference_vol * 5
    norm_vol := norm_vol >= 10 ? 10 : norm_vol
    result = norm_vol
    result

// Variables to track price in zones
var bool price_in_resistance = false
var bool price_in_support = false

// Variables to track previous price position relative to zones
var bool was_in_resistance = false
var bool was_in_support = false

// Variables to store liquidity levels when price is inside zones
var float stored_res_level = 0.0
var float stored_sup_level = 0.0

// Arrays to store boxes and their liquidity levels
var box_res_array = array.new<box>()
var box_sup_array = array.new<box>()
var float_res_levels = array.new<float>()
var float_sup_levels = array.new<float>()

// Function to check if price is in zones and manage boxes
process_zones(boxes, levels, is_resistance) =>
    price_in_zone = false
    zone_level = 0.0
    
    // Create a list of indices to remove (we can't remove while iterating)
    var indices_to_remove = array.new<int>()
    array.clear(indices_to_remove)
    
    // Process each box
    if boxes.size() > 0
        for i = 0 to boxes.size() - 1
            box_id = boxes.get(i)
            box_id.set_right(bar_index + 20)
            box_id.set_border_color(na)
            
            // Check if price has broken the zone
            broken_zone = is_resistance ? 
             high > box_id.get_top() : 
             low < box_id.get_bottom()
            
            if broken_zone
                box_id.set_right(bar_index)
                box_id.set_text('')
                array.push(indices_to_remove, i)
            else
                // Check if current price is inside this box
                box_top = box_id.get_top()
                box_bottom = box_id.get_bottom()
                
                if close >= box_bottom and close <= box_top
                    price_in_zone := true
                    zone_level := math.max(zone_level, levels.get(i))
    
    // Remove boxes that were broken (in reverse order to maintain correct indices)
    if indices_to_remove.size() > 0
        for i = indices_to_remove.size() - 1 to 0
            idx = indices_to_remove.get(i)
            boxes.remove(idx)
            levels.remove(idx)
    
    [price_in_zone, zone_level]

// Main function to create and manage liquidity zones
update_liquidity_zones() =>
    volume_ = normalize_volume()[1]
    h = ta.highest(15)
    l = ta.lowest(15)
    _size = (high - low) / 2

    // More pronounced gradient based on volume
    color_upper = color.new(
     color_high_sup, 
     math.max(5, 95 - volume_ * 9)
     )
    color_lower = color.new(
     color_high_res, 
     math.max(5, 95 - volume_ * 9)
     )
    text_col = color.white
    
    // Set the label text based on liquidity level
    txt = volume_ < alert_threshold_med ? "Low" : 
          volume_ < alert_threshold_high ? "Med" : 
          "High"
    
    // Calculate current liquidity level
    current_level = volume_ >= alert_threshold_high ? alert_threshold_high : 
                   volume_ >= alert_threshold_med ? alert_threshold_med : 
                   1.0

    // Liquidity zone creation for high prices (resistance)
    if h[1] == high[1] and high < h
        // Create zones only if they're not low liquidity or if low liquidity display is enabled
        if volume_ >= alert_threshold_med or show_low_liquidity
            box1 = box.new(
             bar_index[1], 
             high[1] + _size[1], 
             bar_index, 
             high[1], 
             bgcolor = color.rgb(0, 128, 128), 
             border_color = color.rgb(91, 233, 72),
             force_overlay = false
             )
            
            if volume_ >= alert_threshold_high
                box1 := box.new(
                 bar_index[1], 
                 high[1] + _size[1], 
                 bar_index, 
                 high[1], 
                 bgcolor = color_lower, 
                 force_overlay = true
                 )
            else if volume_ >= alert_threshold_med
                box1 := box.new(
                 bar_index[1], 
                 high[1] + _size[1], 
                 bar_index, 
                 high[1], 
                 bgcolor = color.new(color_high_res, 50), 
                 force_overlay = false
                 )
            else
                box1 := box.new(
                 bar_index[1], 
                 high[1] + _size[1], 
                 bar_index, 
                 high[1], 
                 bgcolor = color.new(color_high_res, 80), 
                 force_overlay = false
                 )
            
            box1.set_text(txt)
            box1.set_text_size(
             volume_ >= alert_threshold_high ? size.large : 
             volume_ >= alert_threshold_med ? size.normal : 
             size.small
             )
            box1.set_text_halign(text.align_right)
            box1.set_text_color(text_col)
            
            // Store the box and its liquidity level
            box_res_array.push(box1)
            float_res_levels.push(current_level)

    // Liquidity zone creation for low prices (support)
    if l[1] == low[1] and low > l
        // Create zones only if they're not low liquidity or if low liquidity display is enabled
        if volume_ >= alert_threshold_med or show_low_liquidity
            box2 = box.new(
             bar_index[1], 
             low[1], 
             bar_index, 
             low[1] - _size[1], 
             bgcolor = color.gray, 
             border_color = color.rgb(242, 6, 104), 
             force_overlay = false
             )
            
            if volume_ >= alert_threshold_high
                box2 := box.new(
                 bar_index[1], 
                 low[1], 
                 bar_index, 
                 low[1] - _size[1], 
                 bgcolor = color_upper, 
                 force_overlay = true
                 )
            else if volume_ >= alert_threshold_med
                box2 := box.new(
                 bar_index[1], 
                 low[1], 
                 bar_index, 
                 low[1] - _size[1], 
                 bgcolor = color.new(color_high_sup, 50), 
                 force_overlay = false
                 )
            else
                box2 := box.new(
                 bar_index[1], 
                 low[1], 
                 bar_index, 
                 low[1] - _size[1], 
                 bgcolor = color.new(color_high_sup, 80), 
                 force_overlay = false
                 )
            
            box2.set_text(txt)
            box2.set_text_size(
             volume_ >= alert_threshold_high ? size.large : 
             volume_ >= alert_threshold_med ? size.normal : 
             size.small
             )
            box2.set_text_halign(text.align_right)
            box2.set_text_color(text_col)
            
            // Store the box and its liquidity level
            box_sup_array.push(box2)
            float_sup_levels.push(current_level)

    // Process existing zones and check if price is inside
    [in_res, res_level] = process_zones(box_res_array, float_res_levels, true)
    [in_sup, sup_level] = process_zones(box_sup_array, float_sup_levels, false)
    
    [in_res, in_sup, res_level, sup_level]

//
// ---- DAILY HIGH LOW TRACKING ----
//

// Set line style based on user input
var line_style = daily_level_style == "Solid" ? line.style_solid : daily_level_style == "Dashed" ? line.style_dashed : line.style_dotted

// Variables to track daily high and low
var float day_high = na
var float day_low = na
var line day_high_line = na
var line day_low_line = na
var label day_high_label = na
var label day_low_label = na

// Check for new day
new_day = ta.change(dayofweek)

// Reset tracking on new day
if new_day
    day_high := high
    day_low := low
    
    // Clean up old lines
    if not na(day_high_line)
        line.delete(day_high_line)
    if not na(day_low_line)
        line.delete(day_low_line)
    
    // Clean up old labels
    if not na(day_high_label)
        label.delete(day_high_label)
    if not na(day_low_label)
        label.delete(day_low_label)

    // Create new lines if enabled
    if show_daily_levels
        day_high_line := line.new(
         bar_index, 
         day_high, 
         bar_index + 1, 
         day_high, 
         color=daily_high_color, 
         width=daily_level_width, 
         style=line_style
         )
        day_low_line := line.new(
         bar_index, 
         day_low, 
         bar_index + 1, 
         day_low, 
         color=daily_low_color, 
         width=daily_level_width, 
         style=line_style
         )
        
        // Create new labels
        day_high_label := label.new(
         bar_index, 
         day_high, 
         "Day High", 
         color=color.new(color.black, 100), 
         style=label.style_label_down, 
         textcolor=color.green, 
         size=size.small
         )
        day_low_label := label.new(
         bar_index, 
         day_low, 
         "Day Low", 
         color=color.new(color.black, 100), 
         style=label.style_label_up, 
         textcolor=color.red, 
         size=size.small
         )
else
    // Update daily high/low when broken
    if high > day_high
        day_high := high
        
        // Update high line
        if show_daily_levels
            if not na(day_high_line)
                line.delete(day_high_line)
            if not na(day_high_label)
                label.delete(day_high_label)
                
            day_high_line := line.new(
             bar_index, 
             day_high, 
             bar_index + 1, 
             day_high, 
             color=daily_high_color, 
             width=daily_level_width, 
             style=line_style
             )
            day_high_label := label.new(
             bar_index, 
             day_high, 
             "Day High", 
             color=color.new(color.black, 100), 
             style=label.style_label_down, 
             textcolor=color.green, 
             size=size.small
             )
    
    if low < day_low
        day_low := low
        
        // Update low line
        if show_daily_levels
            if not na(day_low_line)
                line.delete(day_low_line)
            if not na(day_low_label)
                label.delete(day_low_label)
                
            day_low_line := line.new(
             bar_index, 
             day_low, 
             bar_index + 1, 
             day_low, 
             color=daily_low_color, 
             width=daily_level_width, 
             style=line_style
             )
            day_low_label := label.new(
             bar_index, 
             day_low, 
             "Day Low", 
             color=color.new(color.black, 100), 
             style=label.style_label_up, 
             textcolor=color.red, 
             size=size.small
             )

// Extend the lines to the current bar
if show_daily_levels and not na(day_high_line) and not na(day_low_line)
    line.set_x2(day_high_line, bar_index)
    line.set_x2(day_low_line, bar_index)
    
    // Update label positions
    if not na(day_high_label)
        label.set_x(day_high_label, bar_index)
    if not na(day_low_label)
        label.set_x(day_low_label, bar_index)

//
// ---- MAIN CODE ----
//

// Update liquidity zones and get price status
[in_resistance, in_support, res_zone_level, sup_zone_level] = update_liquidity_zones()

// Store price zone status for alerts
price_in_resistance := in_resistance
price_in_support := in_support

// Store liquidity levels when price is inside zones
if price_in_resistance
    stored_res_level := res_zone_level
if price_in_support
    stored_sup_level := sup_zone_level

// Detect when price leaves resistance zones (was inside, now outside)
leave_resistance = was_in_resistance and not price_in_resistance and 
 ((stored_res_level >= alert_threshold_high and alert_on_high) or 
 (stored_res_level >= alert_threshold_med and stored_res_level < alert_threshold_high and alert_on_med)) and 
 is_active_session()

// Detect when price leaves support zones (was inside, now outside)
leave_support = was_in_support and not price_in_support and 
 ((stored_sup_level >= alert_threshold_high and alert_on_high) or 
 (stored_sup_level >= alert_threshold_med and stored_sup_level < alert_threshold_high and alert_on_med)) and 
 is_active_session()

// Detect when price first enters resistance zones (was outside, now inside)
enter_resistance = not was_in_resistance and price_in_resistance and 
 ((res_zone_level >= alert_threshold_high and alert_on_high) or 
 (res_zone_level >= alert_threshold_med and res_zone_level < alert_threshold_high and alert_on_med)) and 
 is_active_session()

// Detect when price first enters support zones (was outside, now inside)
enter_support = not was_in_support and price_in_support and 
 ((sup_zone_level >= alert_threshold_high and alert_on_high) or 
 (sup_zone_level >= alert_threshold_med and sup_zone_level < alert_threshold_high and alert_on_med)) and 
 is_active_session()

// Update previous position variables for next bar
was_in_resistance := price_in_resistance
was_in_support := price_in_support

// Define alert conditions based on price being in zones and meeting liquidity thresholds
resistance_alert = price_in_resistance and 
 ((res_zone_level >= alert_threshold_high and alert_on_high) or 
 (res_zone_level >= alert_threshold_med and res_zone_level < alert_threshold_high and alert_on_med)) and 
 is_active_session()

support_alert = price_in_support and 
 ((sup_zone_level >= alert_threshold_high and alert_on_high) or 
 (sup_zone_level >= alert_threshold_med and sup_zone_level < alert_threshold_high and alert_on_med)) and 
 is_active_session()

// Combined alert for when price first enters either support or resistance zones
alertcondition(
 (enter_resistance or enter_support) and is_active_session(), 
 title="Price Entered Order Pool", 
 message="Price has entered a significant Order Pool \nTicker: {{ticker}}\nPrice: {{close}}\nChart: https://www.tradingview.com/chart/?symbol={{ticker}}"
 )

// Alert for leaving resistance zones
alertcondition(
 leave_resistance,
 title="Price Left Resistance Zone", 
 message="Price has left a significant resistance zone \nTicker: {{ticker}}\nPrice: {{close}}\nChart: https://www.tradingview.com/chart/?symbol={{ticker}}"
 )

// Alert for leaving support zones
alertcondition(
 leave_support,
 title="Price Left Support Zone", 
 message="Price has left a significant support zone \nTicker: {{ticker}}\nPrice: {{close}}\nChart: https://www.tradingview.com/chart/?symbol={{ticker}}"
 )

// Combined alert for leaving either support or resistance zones
alertcondition(
 leave_resistance or leave_support,
 title="Price Left Order Pool", 
 message="Price has left a significant Order Pool \nTicker: {{ticker}}\nPrice: {{close}}\nChart: https://www.tradingview.com/chart/?symbol={{ticker}}"
 )

// Limit number of boxes displayed on the chart
a_allBoxes = box.all
if a_allBoxes.size() > box_amount
    box.delete(a_allBoxes.shift()) 